Практическое занятие №1. Введение в разработку и анализ требований
Практическое занятие №1
1.1 Интервью с представителем заказчика (инвестором)
Наименование проекта
Простой текстовый редактор на C++
Заказчик
Учебная лаборатория по разработке программного обеспечения.
Концепция продукта
Продукт представляет собой текстовый редактор, позволяющий пользователю выполнять базовые операции с текстом: ввод, редактирование, сохранение и открытие файлов. Основной акцент сделан на простоте использования, минималистичности интерфейса и надежности работы с файлами. Редактор должен работать как в консольном режиме, так и (опционально) через графический интерфейс.
Цель разработки
Создание простого текстового редактора для редактирования, просмотра, создания и сохранения текстовых файлов, который будет реализован на языке C++ с применением основных алгоритмов обработки текстовых данных и методов работы с файловой системой.
1.2 Черновик графического интерфейса пользователя
Скетч: Нарисовать эскиз основного экрана ежедневника, включая ключевые элементы:
Меню: файл, открыть, сохранить, сохранить как..., выход, правка, копировать, вставить, вырезать, отменить, формат, шрифт, размер.
Кнопка: «открыть» (иконка папки) кнопка «сохранить» (иконка дискеты) кнопка «настройки» (иконка шестеренки).
Поля ввода: большое текстовое поле для ввода текста (основная область редактирования).
Визуальные элементы: строка состояния внизу (показывает информацию о текущем файле, количество слов и символов), панель инструментов (с кнопками для быстрого доступа к функциям).
Прототип: Создать простой прототип с помощью инструментов, таких как Figma, Adobe XD, Balsamiq или Sketch.
2. Сбор требований заказчика

2.1 Конфигурация оборудования

Операционная система: Windows
Минимальные системные требования
Процессор: 1 ГГц
Оперативная память: 512 МБ
Место на диске: 100 МБ для установки программы, 10 МБ для работы с временными файлами
Компилятор: GCC, MinGW, MSVC, Clang
Функциональные требования
Основные функции
1. Создание нового файла: программа должна позволять пользователю создать пустой текстовый файл с последующим вводом текста.
2. Открытие существующего файла: пользователь должен иметь возможность открыть текстовый файл формата .txt. Программа должна корректно обрабатывать ошибки при открытии несуществующего или поврежденного файла.
3. Редактирование текста: программа должна поддерживать вставку, удаление, копирование и перемещение текста в открытом файле. Весь текст должен быть доступен для редактирования.
4. Сохранение файла: возможность сохранить текстовый файл в формате .txt. Пользователю должно предлагаться выбрать директорию для сохранения.
5. Закрытие программы: при выходе из программы, если файл был изменен, но не сохранен, программа должна предложить пользователю сохранить изменения.
Дополнительные функции
1. Отмена/Повтор действия (опционально): программа должна поддерживать отмену последнего действия редактирования и возможность его повторного выполнения.
2. Просмотр информации о файле: отображение информации о файле: размер файла, дата создания, дата последнего изменения.
3. Поиск текста: пользователь должен иметь возможность найти определенное слово или фразу в документе.
4. Поддержка работы с несколькими файлами (опционально): возможность работы сразу с несколькими файлами в рамках одной сессии редактора.
Нефункциональные требования
1. Производительность: программа должна поддерживать работу с текстовыми файлами объемом до 10 МБ без значительного замедления. Операции по открытию, редактированию и сохранению файлов должны выполняться за приемлемое время (до 2 секунд для файлов объемом до 10 МБ).
2. Надежность: программа должна корректно обрабатывать ошибки ввода-вывода, такие как невозможность доступа к файлу или запись в него. Программа не должна завершаться с ошибкой при попытке открытия файла, который не существует, или при попытке сохранения в защищенную директорию.
3. Практичность: интерфейс программы должен быть простым и интуитивно понятным для пользователя с минимальной компьютерной грамотностью. В консольном интерфейсе должны быть предусмотрены ясные команды для работы с программой.

2.2 Методы сбора требований

- Анкетирование: Создание онлайн-формы для сбора ответов от потенциальных пользователей.
- Интервью: Проведение индивидуальных интервью с потенциальными пользователями для углубленного понимания их потребностей.

2.3 Документация требований

Создание таблицы: Заполнить таблицу, в которой будут отражены все собранные требования, их приоритет и описание.

Таблица 1 – требования, их приоритет и описание.
Требование	Приоритет	Описание
Создание нового документа	Высокий	Пользователь должен иметь возможность создать новый текстовый файл для редактирования.
Открытие файла	Высокий	Возможность открывать существующие текстовые файлы для редактирования.
Сохранение файла	Высокий	Пользователь может сохранять изменения в документе или сохранять файл под новым именем.
Замена текста	Средний	Возможность замены найденного текста на новый текст с запросом у пользователя.
Undo/Redo	Высокий	Реализация функции отмены и повторного выполнения последних операций редактирования.
Операции с буфером обмена	Средний  	Возможность вырезать, копировать и вставлять текст из и в документ.
Настройка шрифта и цвета	Низкий  	Опции для изменения типа и размера шрифта, а также цвета фона и текста для удобства чтения.
Автосохранение	Средний  	Функция периодического автосохранения файла, чтобы минимизировать потерю данных.
Строка состояния	Средний  	Информация о текущей строке и позиции курсора, а также общее количество строк в документе.
Печать документа	Низкий  	Возможность отправки документа на печать через подключенный принтер.
Многоязычность	Низкий  	Поддержка ввода и отображения текста на различных языках.
Поддержка плагинов	Низкий  	Возможность расширять функциональность редактора с помощью дополнительных плагинов.

Составление документа: Написать подробный документ, описывающий все собранные требования с пояснениями и примерами.

3. Требования к интерфейсу

3.1 Консольный интерфейс:

Программа должна иметь удобный консольный интерфейс, через который пользователь сможет взаимодействовать с простым текстовым редактором.
Меню с возможностями:
1: Создать новый документ
2: Открыть файл
3: Сохранить файл
4: Поиск текста
5: Замена текста
0: Выход из программы

3.2 Обработка ошибок:

Программа должна корректно обрабатывать ошибки ввода (некорректная дата, пустое описание
Сообщения об ошибках должны быть информативными и помогать пользователю исправить ошибку.

4. Архитектура системы

Программа должна быть построена на основе объектно-ориентированного подхода. Основные классы:
TextEditor: Главный класс редактора, управляющий основными функциями.
FileHandler: Класс для импорта/экспорта текста из/в файлов.
SearchAndReplace: Класс для обработки функций поиска и замены текста.

5. Технические требования

Язык программирования: C++
Используемая среда: среда разработки Visual Studio, Code::Blocks
Компилятор: GCC или любой другой поддерживающий стандарт C++11 и выше.

6.Порядок реализации

6.1 Этапы разработки:

Проектирование структуры классов.
Реализация базовых функций (создание, открытие, сохранение файлов).
Добавление функций поиска и замены.
Разработка пользовательского интерфейса.
Тестирование программы.

7. Тестирование

Программа должна пройти тестирование на корректность выполнения следующих функций:
Создание нового документа, открытие файла, сохранение файла, поиск текста, замена текста, ошибка сохранения, навигация, сохранение формата.

8. Сроки выполнения

Предполагаемое время на реализацию проекта — 2-4 недели.

9. Требования к документации

Документация должна включать:

Руководство пользователя: описание всех функций и классов программы, а также инструкции по установке и использованию редактора.
Комментарии в исходном коде для облегчения его чтения и поддержки.

10. Оценка трудозатрат

Разработка и тестирование основных функций: 1-2 недели. Разработка дополнительных функций: 1 неделя. Финальное тестирование и исправление ошибок: 1 неделя.


Практическое задание №2. Описание C-требований для программы "Текстовый редактор С++"

1. Целевой сегмент рынка 

Может включать различные группы пользователей, которые могут проявлять интерес к использованию данного программного продукта. Ниже представлены основные целевые сегменты:

1. Студенты и учащиеся:
   - Описание: Студенты, изучающие программирование, лингвистику, журналистику и другие дисциплины, требуют простые инструменты для написания и редактирования текстов.
   - Потребности: Простота в использовании, возможность быстрого редактирования, поддержка различных форматов файлов, наличие функций для работы с текстом (например, поиск, замена).

2. Писатели и контент-креаторы:
   - Описание: Творческие личности, работающие над текстами, такими как статьи, блоги, книги и сценарии.
   - Потребности: Простой и интуитивно понятный интерфейс, возможности для форматирования текста, статистика текста, простота в использовании.

3. Специалисты по технической документации:
   - Описание: Люди, занимающиеся написанием и редактированием технической документации.
   - Потребности: Возможность работы с такими форматами, как .txt, и поддержка функций, необходимых для подготовки качественной документации.

4. Школьники:
   - Описание: Учащиеся средних и старших классов, которым необходимо выполнять домашние задания и проекты.
   - Потребности: Простой интерфейс, легкость сохранения и загрузки файлов, возможность использования на различных устройствах.

2. Определение бизнес ролей пользователей и сценариев работы:

    Сценарий 1: Писатель Алиса Кулик
- Типы пользователей: Писатель
- Процессы: Создание и редактирование художественных произведений, написание статей и заметок, ведение дневника и разработка сценариев.
- Операционная среда: Используется на настольном компьютере с ОС Windows.
- Требования к дизайну: Интеграция с календарем, возможность совместного доступа и редактирования, напоминания.
- Приоритет: Высокий

3. Определение функциональных требований:

- Ввод и сохранение текстовых файлов в различных форматах (например, .txt, .docx, .md).
- Основные функции редактирования: копирование, вставка, вырезание текста.
- Широкие возможности форматирования текста (жирный, курсив, изменение размера шрифта и цвета, создание списков).
- Поддержка многоуровневой отмены и повтора действий (Undo/Redo).
- Функция поиска и замены текста в документе.
- Встроенные инструменты для создания и хранения заметок и идей.
- Специальные режимы работы, такие как «без отвлекающих факторов» для сосредоточенной работы.

4. Определение требований к дизайну:

- Интуитивно понятный графический интерфейс, который способствует погружению в процесс написания.
- Адаптивный дизайн для работы на ноутбуках с различными разрешениями экрана.
- Использование современных иконок и визуальных элементов для упрощения навигации.
- Соответствие гайдлайнам операционных систем Windows.
- Понятная система сохранения и открытия файлов с возможностью быстрого доступа к последним документам.

5. Образ продукта:

"Текстовый редактор C++" — это удобный инструмент для писателей, предлагающий все необходимые функции для создания и редактирования текстов. Эта программа обеспечивает пользователям интуитивно понятный интерфейс и широкий спектр возможностей для работы с текстом, позволяя сосредоточиться на творчестве и преодолении творческих блоков.

Практическое задание №3. Определение основных профилей пользователей

1. На основании пользовательских профилей разработать черновой вариант пользовательского интерфейса.

2. Составить план работы после анализа С-требований.

2.1 Черновой вариант пользовательского интерфейса:

1. Главный экран:
- Интуитивно понятное меню для доступа к основным функциям редактора.
- Поле для быстрого создания нового документа.
- Панель с текущими заметками и проектами, отображающая статус выполнения.

2. Экран управления документами:
- Список всех открытых документов с возможностью создания, редактирования и закрытия.
- Функции для сортировки и поиска по документам, включая фильтрацию по дате изменения или имени файла.
- Интерактивные элементы для быстрого доступа к часто используемым файлам и шаблонам.

3. Экран управления форматированием текста:

- Панель инструментов с основными функциями форматирования: изменение шрифта, размера, цвета текста и стилей (жирный, курсив, подчеркивание).
- Удобные функции для создания списков (нумерованных и маркированных), вставки изображений или таблиц.
- История изменений с возможностью отмены и повтора действий.

4. Экран настройки настроек:
- Параметры для настройки интерфейса: выбор темы оформления, размера шрифта и цветовой схемы.
- Опции автосохранения и резервного копирования документов.
- Настройки горячих клавиш для быстрого доступа к функциям редактора.

3. План работы после анализа С-требований:

1. Реализация основного функционала:
- Ввод и хранение данных: Создание системы для ввода и хранения текстовых документов с возможностью автоматического сохранения.
- Форматирование текста: Разработка функций для базового и расширенного форматирования (жирный, курсив, подчеркивание, списки и т.д.).
- Поиск и фильтрация: Реализация возможностей поиска и фильтрации документов по различным критериям, таким как дата создания, наличие ключевых слов и т.д.

2. Разработка интеграции с другими приложениями:
- Интеграция с облачными сервисами: Подключение к Google Drive и Dropbox для хранения и обмена документами.
- Связь с мессенджерами: Возможность делиться документами и заметками через популярные мессенджеры.

3. Реализация дополнительных функций:
- Управление версиями: Введение системы отслеживания версий документа с возможностью восстановления предыдущих версий.
- Напоминания и уведомления: Функция установки напоминаний о важных изменениях или сроках.
- Встроенный редактор кода: Поддержка подсветки синтаксиса для различных языков программирования при необходимости.

4. Разработка интуитивного и адаптивного интерфейса:
- Соответствие стандартам UX/UI: Обеспечение удобства использования по современным гайдлайнам интерфейса.
- Настройки внешнего вида: Возможность выбора тем оформления, изменений шрифтов и цветовых схем.
Логичная структура: Разработка интуитивно понятной системы навигации и организации документов.

5. Тестирование и оптимизация приложения:
- Сбор обратной связи: Организация процесса получения отзывов от пользователей для выявления недостатков и пожеланий.
- Анализ результатов: Проведение анализа собранной информации для внесения необходимых улучшений и доработок.

Практическое задание №4. Разработка детальных требований (D-требования)

1. Структурирование пользовательских историй и спецификация требований

1. Пользовательские истории:
- Шаблон: “Как [тип пользователя], я хочу [действие], чтобы [цель/результат]”.
- Пример: “ Как писатель, я хочу сохранять свои заметки, чтобы не потерять идеи для будущих статей”.

2. Структурирование:
- Категории пользователей: студенты, писатели, офисные работники и т.д.
- Действия: создание документа, редактирование текста, сохранение документа, открытие существующего документа, печать текста. 
- Цели: упрощение процесса написания, организация текстовой информации, возможность быстрого редактирования и форматирования.

3. Спецификация требований:
- Функциональные требования: возможность создания, редактирования, сохранения, открытия и печати текстовых документов.
- Нефункциональные требования: высокая производительность, безопасность данных, удобство использования, поддержка форматов.

2. Контроль функциональных и нефункциональных требований

1. Функциональные требования: 
- Создание нового документа: подтверждение успешного создания и визуальное отображение нового документа в интерфейсе.
- Редактирование текста: возможность изменения текста, а также проверка правильного сохранения изменений.
- Сохранение документа: проверка успешного сохранения с уведомлением о завершении операции и проверка доступа к сохранённому документу.
- Открытие существующего документа: подтверждение успешного открытия и корректного отображения содержимого.
- Печать текста: проверка корректной работы функции печати и формата распечатываемого документа.

2. Нефункциональные требования: 
- Тестирование производительности: оценка скорости загрузки документов и времени отклика при редактировании текста.
- Безопасность данных: проверка на наличие механизмов шифрования документов при сохранении и передаче, а также тестирование функциональности по созданию резервных копий.
- Удобство использования: оценка интуитивности интерфейса при проведении пользовательского тестирования, анализ отзывов пользователей о доступности инструментов и навигации в редакторе.

3. Диаграмма последовательности

Диаграмма последовательности показывает взаимодействие между пользователем и системой. Пример для создания нового документа в текстовом редакторе:
1.	Пользователь открывает приложение.
2.	Пользователь выбирает опцию “Создать новый документ”.
3.	Система отображает пустое текстовое поле для ввода текста.
4.	Пользователь вводит текст в документ.
5.	Пользователь выбирает опцию “Сохранить”.
6.	Система запрашивает имя файла и место для сохранения.
7.	Пользователь вводит имя файла и нажимает “Сохранить”.
8.	Система сохраняет документ и отображает сообщение об успешном сохранении.
9.	Система обновляет список документов (если применимо) для отображения нового сохраненного файла.

4. Разработка пользовательского интерфейса

1. Интерфейс:
- Главный экран: панель инструментов с основными функциями (создать, открыть, сохранить, печать), а также отображение текущего документа в текстовом поле.
- Экран редактирования текста: текстовое поле с возможностью форматирования (жирный, курсив, подчеркивание), undo/redo, а также панель для выбора шрифта и размера.
- Уведомления: подсказки о сохранении документа, ошибки при попытке закрыть несохраненный файл и успешные сообщения при сохранении.

2. Эргономичность:
- Простота навигации: интуитивно понятные кнопки и меню, расположенные логично и последовательным образом.
- Читаемость: использование высококонтрастных цветов, удобных шрифтов и размеров текста для обеспечения легкости восприятия. 
- Адаптивность: корректное отображение интерфейса на различных устройствах (планшеты, смартфоны) и экранах (различные разрешения), включая возможность изменения ориентации экрана.

